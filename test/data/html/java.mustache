/*
{{&header_text}}

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

package io.beautifier.html;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Objects;
import java.util.regex.Pattern;

import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import io.beautifier.core.Options.TemplateLanguage;
import io.beautifier.css.CSSBeautifier;
import io.beautifier.html.Options.IndentScripts;
import io.beautifier.html.Options.WrapAttributes;
import io.beautifier.javascript.JavaScriptBeautifier;

public class GeneratedTests {

	private Options.Builder opts;
	
	@BeforeEach
	void reset_options() {
		opts = Options.builder();
		opts.indent_size = 4;
		opts.indent_char = " ";
		opts.preserve_newlines = true;
		opts.end_with_newline = false;

{{#default_options}}		{{#java_opt}}opts.{{name}} = {{&value}}{{/java_opt}};
{{/default_options}}
	}

	private String test_beautifier(String input)
	{
		return new HTMLBeautifier(input, opts.build(), JavaScriptBeautifier::beautify, CSSBeautifier::beautify).beautify();
	}

	private void test_fragment(String input) {
		test_fragment(input, null);
	}

	// test the input on beautifier with the current flag settings
	// does not check the indentation / surroundings as bt() does
	private void test_fragment(String input, String expected)
	{
		if (expected == null) {
			expected = input;
		}

		assertEquals(expected, test_beautifier(input));

		// if the expected is different from input, run it again
		// expected output should be unchanged when run twice.
		if (!Objects.equals(input, expected)) {
			assertEquals(expected, test_beautifier(expected));
		}

		// Everywhere we do newlines, they should be replaced with opts.eol
		opts.eol = "\r\n";
		expected = expected.replaceAll("\n", "\r\n");
		opts.disabled = true;
		assertEquals(input != null ? input : "", test_beautifier(input));
		assertEquals("\n\n" + expected, test_beautifier("\n\n" + expected));
		opts.disabled = false;
		assertEquals(expected, test_beautifier(input));
		if (input != null && input.indexOf('\n') != -1) {
			input = input.replaceAll("\n", "\r\n");
			assertEquals(expected, test_beautifier(input));
			// Ensure support for auto eol detection
			opts.eol = "auto";
			assertEquals(expected, test_beautifier(input));
		}
		opts.eol = "\n";
	}

	private void bth(String input) {
		bth(input, null);
	}

	// test html
	private void bth(String input, String expectation)
	{
		String wrapped_input, wrapped_expectation;

		if (expectation == null) {
			expectation = input;
		}
		test_fragment(input, expectation);

		if (opts.build().indent_size == 4 && input != null) {
			var indent_string = opts.indent_with_tabs ? "\t" : "    ";
			wrapped_input = "<div>\n" + Pattern.compile("^(.+)$", Pattern.MULTILINE).matcher(input).replaceAll(indent_string + "$1") + '\n' + indent_string + "<span>inline</span>\n</div>";
			wrapped_expectation = "<div>\n" + Pattern.compile("^(.+)$", Pattern.MULTILINE).matcher(expectation).replaceAll(indent_string + "$1") + '\n' + indent_string + "<span>inline</span>\n</div>";
			test_fragment(wrapped_input, wrapped_expectation);
		}
	}

	private String unicode_char(int value) {
		return String.copyValueOf(Character.toChars(value));
	}

	@Test
	void beautifier_tests()
	{
		bth("");
	}

{{#groups}}{{#set_mustache_tags}}.{{/set_mustache_tags}}
	{{^matrix}}
	@Test
	@DisplayName("{{#java_escape_string}}{{&name}}{{/java_escape_string}}")
	void {{#java_identifier}}{{&name}}{{/java_identifier}}() {
		{{#options}}
		{{#java_opt}}opts.{{name}} = {{&value}}{{/java_opt}};
		{{/options}}
		{{#tests}}
		{{#test_line}}.{{/test_line}};
		{{/tests}}
	}

	{{/matrix}}
	{{#matrix}}
	@Test
	@DisplayName("{{#java_escape_string}}{{&name}} - ({{#matrix_context_string}}.{{/matrix_context_string}}{{/java_escape_string}})")
	void {{#java_identifier}}{{&name}} - ({{#matrix_context_string}}.{{/matrix_context_string}}){{/java_identifier}}() {
		{{#options}}
		{{#java_opt}}opts.{{name}} = {{&value}}{{/java_opt}};
		{{/options}}
		{{#tests}}
		{{#test_line}}.{{/test_line}};
		{{/tests}}
	}

	{{/matrix}}
{{#unset_mustache_tags}}.{{/unset_mustache_tags}}{{/groups}}

	@Test
	void beautifier_unconverted_tests_null() {
		test_fragment(null, "");
	}

	@Test
	void beautifier_unconverted_tests_end_with_newline() {
		opts.end_with_newline = true;

		test_fragment("", "\n");
		test_fragment("<div></div>\n");
		test_fragment("<div></div>\n\n\n", "<div></div>\n");
		test_fragment("<head>\n" +
			"    <script>\n" +
			"        mocha.setup(\"bdd\");\n" +
			"\n" +
			"    </script>\n" +
			"</head>\n");
	}

	@Test
	void beautifier_unconverted_tests_error_cases() {
		// error cases need love too
		bth("<img title=\"Bad food!\" src=\"foo.jpg\" alt=\"Evil\" \">");
		bth("<!-- don't blow up if a comment is not complete"); // -->
	}

	@Test
	void beautifier_unconverted_tests_basic() {
		test_fragment(
			"<head>\n" +
			"    <script>\n" +
			"        mocha.setup(\"bdd\");\n" +
			"    </script>\n" +
			"</head>");

		test_fragment("<div></div>\n", "<div></div>");
		bth("<div></div>");
		bth("<div>content</div>");
		bth("<div><div></div></div>",
			"<div>\n" +
			"    <div></div>\n" +
			"</div>");
		bth("<div><div>content</div></div>",
			"<div>\n" +
			"    <div>content</div>\n" +
			"</div>");
		bth("<div>\n" +
			"    <span>content</span>\n" +
			"</div>");
		bth("<div>\n" +
			"</div>");
		bth("<div>\n" +
			"    content\n" +
			"</div>");
		bth("<div>\n" +
			"    </div>",
			"<div>\n" +
			"</div>");
		test_fragment("   <div>\n" +
			"    </div>",
			"   <div>\n" +
			"   </div>");
		bth("<div>\n" +
			"</div>\n" +
			"    <div>\n" +
			"    </div>",
			"<div>\n" +
			"</div>\n" +
			"<div>\n" +
			"</div>");
		test_fragment("   <div>\n" +
			"</div>",
			"   <div>\n" +
			"   </div>");
		bth("<div        >content</div>",
			"<div>content</div>");
		bth("<div     thinger=\"preserve  space  here\"   ></div  >",
			"<div thinger=\"preserve  space  here\"></div>");
		bth("content\n" +
			"    <div>\n" +
			"    </div>\n" +
			"content",
			"content\n" +
			"<div>\n" +
			"</div>\n" +
			"content");
		bth("<li>\n" +
			"    <div>\n" +
			"    </div>\n" +
			"</li>");
		bth("<li>\n" +
			"<div>\n" +
			"</div>\n" +
			"</li>",
			"<li>\n" +
			"    <div>\n" +
			"    </div>\n" +
			"</li>");
		bth("<li>\n" +
			"    content\n" +
			"</li>\n" +
			"<li>\n" +
			"    content\n" +
			"</li>");

		bth("<img>content");
		bth("<img> content");
		bth("<img>   content", "<img> content");

		bth("<img><img>content");
		bth("<img> <img>content");
		bth("<img>   <img>content", "<img> <img>content");

		bth("<img><b>content</b>");
		bth("<img> <b>content</b>");
		bth("<img>   <b>content</b>", "<img> <b>content</b>");

		bth("<div>content<img>content</div>");
		bth("<div> content <img> content</div>");
		bth("<div>    content <img>    content </div>",
			"<div> content <img> content </div>");
		bth("Text <a href=\"#\">Link</a> Text");
	}

	@Test
	void beautifier_unconverted_tests_content_unformatted() {
		opts.content_unformatted = new HashSet<>(Arrays.asList("script", "style"));
		bth("<script id=\"javascriptTemplate\" type=\"text/x-kendo-template\">\n" +
			"  <ul>\n" +
			"  # for (var i = 0; i < data.length; i++) { #\n" +
			"    <li>#= data[i] #</li>\n" +
			"  # } #\n" +
			"  </ul>\n" +
			"</script>");
		bth("<style>\n" +
			"  body {background-color:lightgrey}\n" +
			"  h1   {color:blue}\n" +
			"</style>");
	}

	@Test
	void beautifier_unconverted_tests_inline_custom_element() {
		opts.inline = Collections.singleton("custom-element");
		test_fragment("<div>should <custom-element>not</custom-element>" +
					  " insert newlines</div>",
					  "<div>should <custom-element>not</custom-element>" +
					  " insert newlines</div>");
	}

	@Test
	void beautifier_unconverted_tests_line_wrap() {
		bth("<div><span>content</span></div>");

		opts.wrap_line_length = 0;
		//...---------1---------2---------3---------4---------5---------6---------7
		//...1234567890123456789012345678901234567890123456789012345678901234567890
		bth("<div>Some text that should not wrap at all.</div>",
			/* expected */
			"<div>Some text that should not wrap at all.</div>");

		// A value of 0 means no max line length, and should not wrap.
		//...---------1---------2---------3---------4---------5---------6---------7---------8---------9--------10--------11--------12--------13--------14--------15--------16--------17--------18--------19--------20--------21--------22--------23--------24--------25--------26--------27--------28--------29
		//...12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
		bth("<div>Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all.</div>",
			/* expected */
			"<div>Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all.</div>");

		// A value of "0" means no max line length, and should not wrap
		//...---------1---------2---------3---------4---------5---------6---------7---------8---------9--------10--------11--------12--------13--------14--------15--------16--------17--------18--------19--------20--------21--------22--------23--------24--------25--------26--------27--------28--------29
		//...12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
		bth("<div>Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all.</div>",
			/* expected */
			"<div>Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all. Some text that should not wrap at all.</div>");

		opts.wrap_line_length = 40;
		//...---------1---------2---------3---------4---------5---------6---------7
		//...1234567890123456789012345678901234567890123456789012345678901234567890
		bth("<div>Some test text that should wrap_inside_this section here__.</div>",
			/* expected */
			"<div>Some test text that should\n" +
			"    wrap_inside_this section here__.\n" +
			"</div>");
	}

}
